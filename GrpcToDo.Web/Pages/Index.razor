@page "/"
@using GrpcToDo.Shared.DTOs
@using GrpcToDo.Web.components
@inject GrpcToDo.Web.Services.ToDoService ToDoService


@if(_toDoItems?.ToDoItemList != null) 
{
    <div class="todos">
        @foreach (var task in _toDoItems.ToDoItemList)
        {
            <ToDoItem Item=@task ToDoItemChanged="Refresh"></ToDoItem>
        }
    </div>
} else {
    <p style="padding: 0 24px;">Sie haben derzeit keine Aufgaben</p>
}

<MatButton class="btn-add" Raised="true" OnClick="@(e => { _dialogIsOpen = true; })">Task hinzufügen</MatButton>

<ToDoItemEditor DialogIsOpen="@_dialogIsOpen" DialogClosed="@(async (e) => { await CloseDialog(e); })"></ToDoItemEditor>

@code{

    private ToDoItems _toDoItems;
    private bool _dialogIsOpen;
    protected override async Task OnInitializedAsync()
    {
        await GetToDoListAsync();
    }

    protected async Task GetToDoListAsync()
    {
        _toDoItems = await ToDoService.GetToDoList();
    }

    protected async Task CloseDialog(bool refresh) 
    {
        _dialogIsOpen = false;
        if (refresh)
        {
            await Refresh();
        } 
    }

    private async Task Refresh() 
    {
        _toDoItems = await ToDoService.GetToDoList();
        StateHasChanged();
    }
}