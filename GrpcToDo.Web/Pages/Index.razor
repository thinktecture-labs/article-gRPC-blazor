@page "/"
@using GrpcToDo.Shared.DTOs
@using GrpcToDo.Web.components
@inject GrpcToDo.Web.Services.ToDoService _service


@if(toDoItems?.ToDoItemList != null) 
{
    <div class="todos">
        @foreach (var task in toDoItems.ToDoItemList)
        {
            <ToDoItem Item=@task ToDoItemChanged="Refresh"></ToDoItem>
        }
    </div>
} else {
    <p>No ToDos!</p>
}

<MatButton class="btn-add" Raised="true" OnClick="@(e => { dialogIsOpen = true; })">Add new Task</MatButton>

<ToDoItemEditor DialogIsOpen="@dialogIsOpen" DialogClosed="@(async (e) => { await CloseDialog(e); })"></ToDoItemEditor>

@code{

    public ToDoItems toDoItems;
    public bool dialogIsOpen = false;
    public string NewTaskTitle = null;
    public string NewTaskDescription = null;
    protected async override Task OnInitializedAsync()
    {
        await GetToDoListAsync();
    }

    protected async Task GetToDoListAsync()
    {
        toDoItems = await _service.GetToDoList();
    }

    protected async Task CloseDialog(bool refresh) 
    {
        dialogIsOpen = false;
        if (refresh)
        {
            await Refresh();
        } 
    }

    private async Task Refresh() 
    {
        toDoItems = await _service.GetToDoList();
        StateHasChanged();
    }
}