@using GrpcToDo.Web.Services
@using GrpcToDo.Shared.DTOs
@using MatBlazor;

@inject ToDoService ToDoService

<MatDialog @bind-IsOpen="@_dialogIsOpen">
    <MatDialogTitle>Add new Task</MatDialogTitle>
    <MatDialogContent>
        <p>What do you want to do?</p>
        <MatTextField @bind-Value="@_newTaskTitle" @bind-value:event="onchangeevent"></MatTextField>
        <MatTextField @bind-Value="@_newTaskDescription"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@Close">Cancel</MatButton>
        <MatButton OnClick="@AddNewTask">Save</MatButton>
    </MatDialogActions>
</MatDialog>

@code {

    [Parameter]
    public bool DialogIsOpen
    {
        get => _dialogIsOpen;
        set => _dialogIsOpen = value;
    }

    [Parameter]
    public EventCallback<bool> DialogClosed { get; set; }

    private bool _dialogIsOpen;
    private string _newTaskTitle;
    private string _newTaskDescription;

    private async Task AddNewTask(MouseEventArgs e)
    {
        var rnd = new Random();
        await ToDoService.AddToDoData(new ToDoData
        {
            Id = rnd.Next(0, Int32.MaxValue),
            Title = _newTaskTitle,
            Description = _newTaskDescription,
            Status = false
        });
        _dialogIsOpen = false;
        _newTaskTitle = null;
        _newTaskDescription = null;
        await DialogClosed.InvokeAsync(true);
    }

    private async Task Close()
    {
        _dialogIsOpen = false;
        await DialogClosed.InvokeAsync(false);
    }

}